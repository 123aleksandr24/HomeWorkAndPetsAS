package com.example.a310

import android.os.Build.VERSION_CODES.N
import java.util.*
import kotlin.collections.List as List1


fun main() {

    // 1. Ввести число N с клавиатуры.
    println("Введите число ")
    val n = readLine()?.toIntOrNull() ?: return
    println("Вы ввели число $n")

    // 4. Шаги 2–3 вынести в функцию, которая принимает число N и возвращает список из N чисел, введённых с клавиатуры
            //getN(n)

    // 5. Вывести в консоль количество введенных положительных чисел. (Использовать if).
    //if (a > 0) {
    //    println(a)
    //}

    // 6. Вывести в консоль только четные введённые числа. (Использовать фильтрацию коллекции с помощью функции filter.)
    list.filter { it }

    //7. Вывести в консоль количество уникальных введенных чисел. (Использовать set.)
    val list = setOf<Int> (getN(n)) // без повторяющихся элементов
    println(list)

    //8
    sum()

    //9. Для каждого числа посчитать наибольший общий делитель (НОД) для этого числа и суммы из пункта 8.
    // (Создать функцию для вычисления НОД, которая использует рекурсию с модификатором tailrec.)
    //val ans = gcd(Math.abs(a), Math.abs(b))

    //10. Создать Map, где ключ — число, а значение — НОД из пункта 9.

    //11. Вывести все числа с НОД в формате: Число <>, сумма <>, НОД <>. Использовать итерацию по Map из пункта 10.
    // Для каждого из чисел использовать новую строку.


}

fun getN(n : Int ) : MutableList<Int> {
//2. После этого ввести следующие N чисел каждое с новой строки (если пользователь ввел не число — игнорируется эта строка)
// ( использовать цикл и нуллабельные типы)

  val list  = mutableListOf<Int>()
    for (current in list )
    // 3. Сохранить числа в список.
    list.add()

    return list
}

fun printCurrent () {

}

fun sum () {
    //8. Вычислить сумму всех введенных чисел с помощью агрегирующей функции коллекции sum.
    var sum: Long = 0
    var currentNumber : Int = 0
//    for (current : Int in n){
//        if (current > 0) {
//            mutableList.add(current,)
//
//
//            sum += currentNumber
//            currentNumber++
//        }
//    }
}
